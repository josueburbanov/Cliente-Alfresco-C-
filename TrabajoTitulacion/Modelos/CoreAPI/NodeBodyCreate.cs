// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace TrabajoTitulacion.Modelos.CoreAPI
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class NodeBodyCreate
    {
        /// <summary>
        /// Initializes a new instance of the NodeBodyCreate class.
        /// </summary>
        public NodeBodyCreate() { }

        /// <summary>
        /// Initializes a new instance of the NodeBodyCreate class.
        /// </summary>
        public NodeBodyCreate(string name, string nodeType, IList<string> aspectNames = default(IList<string>), IDictionary<string, string> properties = default(IDictionary<string, string>), string relativePath = default(string), NodeBodyCreateAssociation association = default(NodeBodyCreateAssociation), IList<ChildAssociationBody> secondaryChildren = default(IList<ChildAssociationBody>), IList<AssociationBody> targets = default(IList<AssociationBody>))
        {
            Name = name;
            NodeType = nodeType;
            AspectNames = aspectNames;
            Properties = properties;
            RelativePath = relativePath;
            Association = association;
            SecondaryChildren = secondaryChildren;
            Targets = targets;
        }

        /// <summary>
        /// The name must not contain spaces or the following special
        /// characters: * " &lt; &gt; \\\\ / ? : and |.
        /// The character . must not be used at the end of the name.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "nodeType")]
        public string NodeType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "aspectNames")]
        public IList<string> AspectNames { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties")]
        public IDictionary<string, string> Properties { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "relativePath")]
        public string RelativePath { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "association")]
        public NodeBodyCreateAssociation Association { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "secondaryChildren")]
        public IList<ChildAssociationBody> SecondaryChildren { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "targets")]
        public IList<AssociationBody> Targets { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (NodeType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "NodeType");
            }
            if (this.Name != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(this.Name, "^(?!(.*[\\\"\\*\\\\\\>\\<\\?\\/\\:\\|]+.*)|(.*[\\.]?.*[\\.]+$)|(.*[ ]+$))"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "Name", "^(?!(.*[\\\"\\*\\\\\\>\\<\\?\\/\\:\\|]+.*)|(.*[\\.]?.*[\\.]+$)|(.*[ ]+$))");
                }
            }
            if (this.SecondaryChildren != null)
            {
                foreach (var element in this.SecondaryChildren)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.Targets != null)
            {
                foreach (var element1 in this.Targets)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
