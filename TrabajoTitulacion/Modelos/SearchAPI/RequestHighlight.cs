// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace TrabajoTitulacion.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// Request that highlight fragments to be added to result set rows
    /// The properties reflect SOLR highlighting parameters.
    /// </summary>
    public partial class RequestHighlight
    {
        /// <summary>
        /// Initializes a new instance of the RequestHighlight class.
        /// </summary>
        public RequestHighlight() { }

        /// <summary>
        /// Initializes a new instance of the RequestHighlight class.
        /// </summary>
        public RequestHighlight(string prefix = default(string), string postfix = default(string), int? snippetCount = default(int?), int? fragmentSize = default(int?), int? maxAnalyzedChars = default(int?), bool? mergeContiguous = default(bool?), bool? usePhraseHighlighter = default(bool?), IList<RequestHighlightFieldsItem> fields = default(IList<RequestHighlightFieldsItem>))
        {
            Prefix = prefix;
            Postfix = postfix;
            SnippetCount = snippetCount;
            FragmentSize = fragmentSize;
            MaxAnalyzedChars = maxAnalyzedChars;
            MergeContiguous = mergeContiguous;
            UsePhraseHighlighter = usePhraseHighlighter;
            Fields = fields;
        }

        /// <summary>
        /// The string used to mark the start of a highlight in a fragment.
        /// </summary>
        [JsonProperty(PropertyName = "prefix")]
        public string Prefix { get; set; }

        /// <summary>
        /// The string used to mark the end of a highlight in a fragment.
        /// </summary>
        [JsonProperty(PropertyName = "postfix")]
        public string Postfix { get; set; }

        /// <summary>
        /// The maximum number of distinct highlight snippets to return for
        /// each highlight field.
        /// </summary>
        [JsonProperty(PropertyName = "snippetCount")]
        public int? SnippetCount { get; set; }

        /// <summary>
        /// The character length of each snippet.
        /// </summary>
        [JsonProperty(PropertyName = "fragmentSize")]
        public int? FragmentSize { get; set; }

        /// <summary>
        /// The number of characters to be considered for highlighting.
        /// Matches after this count will not be shown.
        /// </summary>
        [JsonProperty(PropertyName = "maxAnalyzedChars")]
        public int? MaxAnalyzedChars { get; set; }

        /// <summary>
        /// If fragments over lap they can be  merged into one larger fragment
        /// </summary>
        [JsonProperty(PropertyName = "mergeContiguous")]
        public bool? MergeContiguous { get; set; }

        /// <summary>
        /// Should phrases be identified.
        /// </summary>
        [JsonProperty(PropertyName = "usePhraseHighlighter")]
        public bool? UsePhraseHighlighter { get; set; }

        /// <summary>
        /// The fields to highlight and field specific configuration
        /// properties for each field
        /// </summary>
        [JsonProperty(PropertyName = "fields")]
        public IList<RequestHighlightFieldsItem> Fields { get; set; }

    }
}
